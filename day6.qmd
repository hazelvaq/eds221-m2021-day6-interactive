---
title: "D6 Interactive"
format: html
editor: visual
execute: 
  echo: true
  warning: false
---

Tidy verse is a predictable way of organizing data where

1.  Each variable is a column
2.  Each observation is a row
3.  Each cell contains a single value

```{r}
library(tidyverse)
library(here)
library(janitor)
```

```{r}
wb_indicators <- read_csv(here('data','wb_indicators.csv'),na = c("..","")) 
```

Converting to long melting the columns 2001 to 2020

```{r}
wb_indicators_long <- wb_indicators %>% 
  pivot_longer(cols = `2001 [YR2001]`:`2020 [YR2020]`,
               names_to = 'year',
               values_to = 'indicator_values')

```

Separate the year column by the space and then throw away the second column(\[YR2020\]

```{r}
# tidyr::separate()
# dplyr::select() - get rid columns
# select is for keeping or excluding columns
# filter() is for keeping or excluding rows

wb_indicators_clean <- wb_indicators_long %>% 
  separate(col = 'year',
           into = c('year','year_chr'),
           sep = " ") %>% 
  select(-year_chr,-`Country Code`,`Series Code`)
  
```

Use the unique function to determine the unique levels of the data

```{r}
unique(wb_indicators$`Series Name`)
```

More tidying up

```{r}
# we can use drop_na() to delete any row where the series row is missing be careful here it is not usefull
#The series name is then pivoted longer and will be given its own column 
wb_indicators_tidy <- wb_indicators_clean %>% 
  drop_na(`Series Name`) %>% 
  pivot_wider(names_from = `Series Name`,values_from = indicator_values)
```

Here I can change the names of the columns by setting the names to a vector

```{r}
#this is based on position of data frame not a good practice bc it can change

names(wb_indicators_tidy) <- c("country",
                               "year",
                               "access_clean_fuels_pp",
                               "access_electricity_pp",
                               "co2_emissions_kt",
                               "fossil_fuel_cons_pt",
                               "water_stress"
                               )

#A better way would be to set it to what its previous name was
#new name = old name for rename()
wb_indicators_tidy <- wb_indicators_clean %>% 
  drop_na(`Series Name`) %>% 
  pivot_wider(names_from = `Series Name`,values_from = indicator_values) %>% 
  rename(country = `Country Name`,
         aceess_fuels_pp = 'Access to clean fuels and technologies for cooking (% of population)', 
         acess_electricity_pp = 'Access to electricity (% of population)',
         co2_emissions_kt = 'CO2 emissions (kt)',
         fossil_fuel_cons_pt = 'Fossil fuel energy consumption (% of total)',
         water_stress = 'Level of water stress: freshwater withdrawal as a proportion of available freshwater resources'
         ) %>% 
  dplyr::mutate(year = as.numeric(year))

## mutate will overwrite the column
```

Make a graph

```{r}
ggplot(wb_indicators_tidy,aes(x = year, y = co2_emissions_kt)) + geom_line(aes(color = country)) + theme(legend.position = "none")
```
